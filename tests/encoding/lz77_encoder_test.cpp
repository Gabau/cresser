/**
 * @file lz77_encoder_test.cpp
 * @author Gabau (au.gabriel@yahoo.com.sg)
 * @brief Test for implementation of lz77 encoder.
 * @version 0.1
 * @date 2021-12-11
 * 
 * @copyright Copyright (c) 2021
 * 
 */
#include <stdlib.h>
#include <iostream>
#include "lz77encoder.h"


int test_constructor();
int test_encoder(string test);
int test_split();

void print(string val) {
  std::cout << val << std::endl;
}

void assert_pass(int);

int main() {
  assert_pass(test_constructor());
  assert_pass(test_split());
  assert_pass(test_encoder("Afkmklf  skfmsf mfmskf lmlkf smlkf ekml"
    " msd flmsl kdsmlkf masl fmlaksmfldmskgamalrmgkdmfklamf"));
  assert_pass(test_encoder(""));
  assert_pass(test_encoder("Amdsf \nmfkdmsmks %p sdkfmklmsf n mkmdsklfmlm"
    "skdfllag, lemonade is a word mauler chicken and cheeese"));
  assert_pass(test_encoder("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
  assert_pass(test_encoder("111111111111111111111111111111111111111111111111"
    "11111111111111111111111111111111111111111111111111111111"));
  assert_pass(test_encoder("# CMAKE generated file: DO NOT EDIT!"
    "# Generated by Ninja Generator, CMake Version 3.16"
    "# This file contains all the rules used to get the outputs files"
    "# built from the input files."
    "# It is included in the main 'build.ninja'."
    "# ==============================="
    "=============================================="
    "# Project: Comp"
    "# Configuration: Debug"
    "# ================================="
    "============================================"
    "# ========================================="
    "===================================="
    "#############################################"
    "# Rule for running custom commands."
    "rule CUSTOM_COMMAND"
    "command = $COMMAND"
    "description = $DESC"
    "#############################################"
    "# Rule for compiling CXX files."
    "rule CXX_COMPILER__Comp"
    "depfile = $DEP_FILE"
    "deps = gcc"
    "command = /bin/x86_64-linux-gnu-g++-9  $DEFINES"
    " $INCLUDES $FLAGS -MD -MT $out -MF $DEP_FILE -o $out -c $in"
    "description = Building CXX object $out"
    "#############################################"
    "# Rule for linking CXX executable."
    "rule CXX_EXECUTABLE_LINKER__Comp"
    "command = $PRE_LINK && /bin/x86_64-linux-gnu-g++-9 "
    " $FLAGS  $LINK_FLAGS $in  -o $TARGET_FILE"
    " $LINK_PATH $LINK_LIBRARIES && $POST_BUILD"
    "description = Linking CXX executable $TARGET_FILE"
    "restat = $RESTAT"
    "#############################################"
    "# Rule for compiling CXX files."
    "rule CXX_COMPILER__Files"
    "depfile = $DEP_FILE"
    "deps = gcc"
    "command = /bin/x86_64-linux-gnu-g++-9  "
    "$DEFINES $INCLUDES $FLAGS -MD -MT $out -MF $DEP_FILE -o $out -c $in"
    "description = Building CXX object $out"
    "#############################################"
    "# Rule for linking CXX static library."
    "rule CXX_STATIC_LIBRARY_LINKER__Files"
    "command = $PRE_LINK && /usr/bin/cmake -E remove $TARGET_FILE "
    "&& /bin/ar qc $TARGET_FILE $LINK_FLAGS $in"
    " && /bin/ranlib $TARGET_FILE && $POST_BUILD"
    "description = Linking CXX static library $TARGET_FILE"
    "restat = $RESTAT"
    "#############################################"
    "# Rule for compiling CXX files."
    "rule CXX_COMPILER__Encode"
    "depfile = $DEP_FILE"
    "deps = gcc"
    "command = /bin/x86_64-linux-gnu-g++-9  $DEFINES"
    " $INCLUDES $FLAGS -MD -MT $out -MF $DEP_FILE -o $out -c $in"
    "description = Building CXX object $out"
    "#############################################"
    "# Rule for linking CXX static library."
    "rule CXX_STATIC_LIBRARY_LINKER__Encode"
    "command = $PRE_LINK && /usr/bin/cmake -E remove $TARGET_FILE && "
    "/bin/ar qc $TARGET_FILE $LINK_FLAGS $i"
    "n && /bin/ranlib $TARGET_FILE && $POST_BUILD"
    "description = Linking CXX static library $TARGET_FILE"
    "restat = $RESTAT"
    "#############################################"
    "# Rule for compiling CXX files."
    "rule CXX_COMPILER__lz77_encoder_test"
    "depfile = $DEP_FILE"
    "deps = gcc"
    "command = /bin/x86_64-linux-gnu-g++-9  $DEFINES "
    "$INCLUDES $FLAGS -MD -MT $out -MF $DEP_FILE -o $out -c $in"
    "description = Building CXX object $out"
    "#############################################"
    "# Rule for linking CXX executable."
    "rule CXX_EXECUTABLE_LINKER__lz77_encoder_test"
    "command = $PRE_LINK && /bin/x86_64-linux-gnu-g++-9  $FLAGS "
    " $LINK_FLAGS $in  -o $TARGET_FILE "
    "$LINK_PATH $LINK_LIBRARIES && $POST_BUILD"
    "description = Linking CXX executable $TARGET_FILE"
    "restat = $RESTAT"
    "#############################################"
    "# Rule for compiling CXX files."
    "rule CXX_COMPILER__encoder_test"
    "depfile = $DEP_FILE"
    "deps = gcc"));
  return 0;
}

int test_constructor() {
  print("Testing constructor");
  char toTest = 'a';
  // testing the max values
  u_int16_t length = 0b0000000000001111;
  u_int16_t offset = 0b0000111111111111;
  lz77_encoding_t value(toTest, offset, length);
  string res = value.toWrite();
  char big = 0xFF;
  string expected(3, big);
  expected[0] = 'a';
  int val = expected.compare(res);
  return val;
}

int test_encoder(string test) {
  std::cout << "Testing encoder and decoder together." << std::endl;
  string res = lz77_decode(lz77_encode(test));
  int val = test.compare(res);
  if (val != 0) {
    print("String does not decode or encode properly, test failed!!");
    print(test);
    print(res);
  }


  return val;
}

// testing split
int test_split() {
  cout << "split test" << endl;
  uint16_t toSplit = 0xFFFF;
  string sp = split(toSplit);
  string expected(2, 0xFF);

  if (sp.compare(expected) != 0) {
    return -1;
  }
  toSplit = 0xFF;
  sp = split(toSplit);
  if (combine(sp) != toSplit) {
    return -1;
  }

  return 0;
}

void assert_pass(int val) {
  if (val != 0) {
    exit(-1);
  }
}
